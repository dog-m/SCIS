%#pragma -newline -id "-"
#pragma -sp 2

tokens
    % Python string forms - shortstrings are already captured by [stringlit] and [charlit]
    longstringlit	"\"\"\"#[(\"\"\")]*\"\"\""
    longcharlit		"'''#[(''')]*'''"
end tokens

keys 
    'with        'from
    'use         'fragment
    'scope
    'rules
end keys

compounds 
    ->  <-  ...  <=  >=  !=
end compounds

comments 
    //
    /*  */
end comments



define program 
    [opt with_statement] [NL]
    [repeat use_fragment_statement] [NL]
    [repeat scope_definition] [NL]
    [rules]
end define




define with_statement
    'with [id] 'from [file_name] [NL]
end define



define use_fragment_statement
    'use 'fragment [file_name] [NL]
end define

define file_name
    [stringlit]
end define



define scope_definition
    'scope [SP] [SPOFF] [scope_name] ': [SPON] [NL] [IN]
        [basic_scope_or_expression_scope] [NL] [EX] [NL]
end define

define scope_name
    [id]
end define

define basic_scope_or_expression_scope
        [basic_scope]
    |   [expression_scope]
end define


define basic_scope
    '{ [SP] [list basic_scope_constraint+] [SP] '}
end define

define basic_scope_constraint
        [scope_id] [scope_op] [SP] [SPOFF] [opt '...] [stringlit] [opt '...] [SPON]
    |   [scope_id] [scope_op] [number]
end define

define scope_op
    '= | '< | '<= | '> | '>= | '!=
end define

define scope_id
    [SPOFF] [repeat scope_id_root_chain] [id] [SPON]
end define

define scope_id_root_chain
    [id] ':
end define


define expression_scope
        [expression_scope] '| [term_scope]
    |   [expression_scope] '- [term_scope]
    |   [term_scope]
end define

define term_scope
        [term_scope] '& [primary_scope]
    |   [primary_scope]
end define

define primary_scope
        [id]
    |   ( [expression_scope] )
end define




define rules
    [SPOFF] 'rules ': [SPON] [NL] [IN]
        [repeat single_rule+] [EX]
end define

define single_rule
    [SPOFF] [id] ': [SPON] [NL] [IN]
        [repeat rule_statement+] [EX]
end define

define rule_statement
    [rule_path] [NL] [IN]
        [rule_actions] [NL] [EX]
end define




define rule_path
    [SPOFF] '@ [scope_name] [SPON] [repeat path_item_with_arrow+] '# [SP] [SPOFF] [pointcut] ': [SPON]
end define

define pointcut
    [id]
end define

define path_item_with_arrow
    '-> [path_item]
end define

define path_item
    [SP] [SPOFF] '[ [modifier] '] [SPON] [statement_name] '( [param_template] ')
end define

define modifier
    [id]
end define

define statement_name
    [id]
end define

define param_template
        '*
    |   [opt '...] [stringlit] [opt '...]
end define



define rule_actions
    [opt action_make]
    [action_add]
end define

define action_make
    [SPOFF] 'make ': [SPON] [NL] [IN]
      [repeat action_make_item] [NL] [EX]
end define

define action_make_item
    [id] '<- [string_chain] ';
end define

define action_add
    [SPOFF] 'add ': [SPON] [NL] [IN]
        [action_list] [NL] [EX]
end define

define action_list
        [action_id], [NL] [action_list]
    |   [action_id]
end define

define action_id
    [id] [opt template_params]
end define

define template_params
    '( [list id+] ')
end define



define string_chain
    [stringlit_or_constant] [repeat string_chain_node]
end define

define string_chain_node
    '+ [stringlit_or_constant]
end define

define stringlit_or_constant
        [string_constant]
    |   [stringlit]
end define

define string_constant
    [SP] [SPOFF] '$ [id] [SPON]
end define
