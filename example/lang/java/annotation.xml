<annotation
  pipeline='txl "%SRC%" "%TRANSFORM%" -o "%DST%" %PARAMS%'
  >
    <grammar
      language="java"
      src="grammar.txl"
      >
        <keyword-DAG>
            <package type="package_declaration">
                <imports type="repeat import_declaration"/>
                <class type="class_declaration">
                    <method type="method_declaration">
                        <if type="if_statement">
                            <else type="else_clause"/>
                        </if>
                        <switch type="switch_statement">
                            <case type="switch_alternative"/>
                        </switch>
                        <for type="for_statement"/>
                        <while type="while_statement"/>
                        <do_while type="do_statement"/>
                        ...
                    </method>
                </class>
            </package>
        </keyword-DAG>
    </grammar>

    <lib>
        <rule
          name="simplify"
          apply="after-all"
          >
            <source>
                replace [block]
                  '{'{ Statements [repeat declaration_or_statement] '}'}
                by
                  '{ Statements '}
            </source>
        </rule>

        <function
          name="addToImportsIfNotExists"
          apply="call"
          params="Addition:import_declaration"
          >
            <source>
                replace [repeat import_declaration]
                  Imports [repeat import_declaration]

                deconstruct not * [import_declaration] Imports
                  Addition

                by
                  Imports [. Addition]
            </source>
        </function>
    </lib>

    <points-of-interest>
        <point
          id="package_name"
          keyword="package"
          value-of="package_header:package_name"
          />

        <point
          id="class_name"
          keyword="class"
          value-of="class_header:class_name"
          />

        <point
          id="method_name"
          keyword="method"
          value-of="method_declarator:method_name"
          />

        <point
          id="if_condition"
          keyword="if"
          value-of="condition"
          />

        <point
          id="while_condition"
          keyword="while"
          value-of="condition"
          />

        <point
          id="do_while_condition"
          keyword="do_while"
          value-of="condition"
          />

        <point
          id="for_expression"
          keyword="for"
          value-of="for_expression"
          />
    </points-of-interest>

    <pointcuts>
        <keyword
          name="imports"
          search-type="repeat import_declaration"
          sequential="false"
          >
            <templates>
                <template kind="replace">
                    <!--repeat import_declaration-->
                    <p name="all"/>
                </template>

                <template kind="match">
                    <!--repeat import_declaration-->
                </template>
            </templates>
            <pointcuts>
                <pointcut name="all">
                    <paste-algorithm>
                        <fragment-to-variable
                          name="Additions"
                          type="repeat import_declaration"
                          />
                        <insert-call
                          function="addToImportsIfNotExists"
                          params="each Additions"
                          />
                    </paste-algorithm>
                </pointcut>
            </pointcuts>
        </keyword>

        <keyword
          name="class"
          search-type="class_declaration"
          sequential="false"
          filter-poi="class_name"
          >
            <templates>
                <template kind="replace">
                    <!--repeat modifier--> 'class <!--class_name--> <!--opt extends_clause--> <!--opt implements_clause--> '{
                        <p name="before_body"/>
                        <!--repeat class_body_declaration-->
                    '} <!--optional_semicolon-->
                </template>

                <template kind="match">
                    <!--repeat modifier--> 'class <!--class_name--> <!--opt extends_clause--> <!--opt implements_clause--> '{
                        <!--repeat class_body_declaration-->
                    '} <!--optional_semicolon-->
                </template>
            </templates>
            <pointcuts>
                <pointcut name="before_body">
                    <paste-algorithm>
                        <insert-fragment
                          />
                    </paste-algorithm>
                </pointcut>
            </pointcuts>
        </keyword>

        <keyword
          name="method"
          search-type="method_declaration"
          filter-poi="method_name"
          sequential="false"
          >
            <templates>
                <template kind="replace">
                    <!--repeat modifier--> <!--opt generic_parameter--> <!--type_specifier--> <!--method_declarator--> <!--opt throws-->
                    '{
                        <p name="before_body"/>
                        <!--block-->
                        <p name="after_body"/>
                    '}
                </template>

                <template kind="match">
                    <!--repeat modifier--> <!--opt generic_parameter--> <!--type_specifier--> <!--method_declarator--> <!--opt throws-->
                    <!--block-->
                </template>
            </templates>
            <pointcuts>
                <pointcut name="before_body">
                    <paste-algorithm>
                        <insert-fragment
                          />
                    </paste-algorithm>
                </pointcut>
                <pointcut name="after_body" clone="method::before_body"/>
            </pointcuts>
        </keyword>

        <!-- match-type already here in keyword when we described it in keyword-DAG -->
        <keyword
          name="if"
          search-type="statement"
          filter-poi="if_condition"
          >
            <templates>
                <template kind="replace">
                    '{
                        <p name="before"/>
                        'if '( <!--condition--> ') '{
                            <p name="before_body"/>
                            <!--statement-->
                            <p name="after_body"/>
                        '}
                        <!--opt else_clause-->
                        <p name="after"/>
                    '}
                </template>

                <template kind="match" auto-gen="grammar"/>
            </templates>
            <pointcuts>
                <pointcut name="before">
                    <paste-algorithm>
                        <insert-fragment
                          />
                    </paste-algorithm>
                </pointcut>
                <pointcut name="before_body" clone="if::before"/>
                <pointcut name="after_body" clone="if::before"/>
                <pointcut name="after" clone="if::before"/>
            </pointcuts>
        </keyword>

        <keyword
          name="else"
          search-type="else_clause"
          sequential="false"
          >
            <templates>
                <!-- pointcut "after" already exists in "if" keyword -->
                <template kind="replace">
                    'else '{
                        <p name="before_body"/>
                        <!--statement-->
                        <p name="after_body"/>
                    '}
                </template>

                <template kind="match" auto-gen="grammar"/>
            </templates>
            <pointcuts>
                <pointcut name="before_body">
                    <paste-algorithm>
                        <insert-fragment
                          />
                    </paste-algorithm>
                </pointcut>
                <pointcut name="after_body" clone="else::before_body"/>
            </pointcuts>
        </keyword>

        <keyword
          name="for"
          search-type="statement"
          filter-poi="for_expression"
          >
            <templates>
                <template kind="replace">
                    '{
                        <p name="before"/>
                        'for '( <!--for_init--> <!--for_expression--> <!--for_update--> ') '{
                            <p name="before_body"/>
                            <!--statement-->
                            <p name="after_body"/>
                        '}
                        <p name="after"/>
                    '}
                </template>

                <template kind="match" auto-gen="grammar"/>
            </templates>
            <pointcuts>
                <pointcut name="before">
                    <paste-algorithm>
                        <insert-fragment
                          />
                    </paste-algorithm>
                </pointcut>
                <pointcut name="before_body" clone="for::before"/>
                <pointcut name="after_body" clone="for::before"/>
                <pointcut name="after" clone="for::before"/>
            </pointcuts>
        </keyword>

        <keyword
          name="while"
          search-type="statement"
          filter-poi="while_condition"
          >
            <templates>
                <template kind="replace">
                    '{
                        <p name="before"/>
                        'while '( <!--condition--> ') '{
                            <p name="before_body"/>
                            <!--statement-->
                            <p name="after_body"/>
                        '}
                        <p name="after"/>
                    '}
                </template>

                <template kind="match" auto-gen="grammar"/>
            </templates>
            <pointcuts>
                <pointcut name="before">
                    <paste-algorithm>
                        <insert-fragment
                          />
                    </paste-algorithm>
                </pointcut>
                <pointcut name="before_body" clone="while::before"/>
                <pointcut name="after_body" clone="while::before"/>
                <pointcut name="after" clone="while::before"/>
            </pointcuts>
        </keyword>

        <keyword
          name="do_while"
          search-type="statement"
          filter-poi="do_while_condition"
          >
            <templates>
                <template kind="replace">
                    '{
                        <p name="before"/>
                        'do '{
                            <p name="before_body"/>
                            <!--statement-->
                            <p name="after_body"/>
                        '}
                        'while '( <!--condition--> ') ';
                        <p name="after"/>
                    '}
                </template>

                <template kind="match" auto-gen="grammar"/>
            </templates>
            <pointcuts>
                <pointcut name="before">
                    <paste-algorithm>
                        <insert-fragment
                          />
                    </paste-algorithm>
                </pointcut>
                <pointcut name="before_body" clone="do_while::before"/>
                <pointcut name="after_body" clone="do_while::before"/>
                <pointcut name="after" clone="do_while::before"/>
            </pointcuts>
        </keyword>

        <keyword
          name="switch"
          search-type="statement"
          filter-poi="switch_expression"
          >
            <templates>
                <template kind="replace">
                    '{
                        <p name="before"/>
                        'switch '( <!--expression--> ') '{
                            <!--repeat switch_alternative-->
                        '}
                        <p name="after"/>
                    '}
                </template>

                <template kind="match" auto-gen="grammar"/>
            </templates>
            <pointcuts>
                <pointcut name="before">
                    <paste-algorithm>
                        <insert-fragment
                          />
                    </paste-algorithm>
                </pointcut>
                <pointcut name="after" clone="switch::before"/>
            </pointcuts>
        </keyword>

        <!--TODO: CHECK-->
        <keyword
          name="case"
          search-type="repeat declaration_or_statement"
          filter-poi="case_label"
          sequential="true"
          >
            <templates>
                <template kind="replace">
                    <!--switch_label-->
                        <p name="before_body"/>
                        <!--repeat declaration_or_statement-->
                        <p name="after_body"/>
                </template>

                <template kind="match" auto-gen="grammar"/>
            </templates>
            <pointcuts>
                <pointcut name="before_body">
                    <paste-algorithm>
                        <insert-fragment
                          />
                    </paste-algorithm>
                </pointcut>
                <pointcut name="after_body">
                    <paste-algorithm>
                        <fragment-to-variable
                          name="Additions"
                          type="repeat declaration_or_statement"
                          />
                        <insert-call
                          function="."
                          params="Additions"
                          />
                    </paste-algorithm>
                </pointcut>
            </pointcuts>
        </keyword>
    </pointcuts>
</annotation>
