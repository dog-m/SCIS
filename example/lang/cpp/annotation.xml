<annotation>
    <grammar
      language="cpp"
      src="grammar.txl"
      >
        <keyword-DAG>
            <imports type="repeat declaration"/>
            <class type="class_specifier">
                <method type="function_definition">
                    <if type="if_statement">
                        <else type="else_statement"/>
                    </if>
                    <switch type="switch_statement">
                        <case type="statement"/>
                    </switch>
                    <for type="for_statement"/>
                    <while type="while_statement"/>
                    <do_while type="do_while_statement"/>
                    ...
                </method>
            </class>
            <method/>
        </keyword-DAG>
    </grammar>

    <lib>
        <rule
          name="simplify"
          apply="after-all"
          >
            <source>
                replace [compound_statement]
                  '{ '{ Statements [statement_list] '} '}
                by
                  '{ Statements '}
            </source>
        </rule>

        <function
          name="addToUsesUnique"
          apply="call"
          params="Addition:declaration"
          >
            <source>
                replace [repeat declaration]
                  Imports [repeat declaration]
                deconstruct not * [declaration] Imports
                  Addition
                by
                  Addition Imports
            </source>
        </function>
    </lib>

    <points-of-interest>
        <point
          id="class_name"
          keyword="class"
          value-of="class_head:class_name_variants"
          />

        <point
          id="method_namespace"
          keyword="method"
          value-of="function_declarator:declared_item:declared_name:nested_name_spec"
          />

        <point
          id="method_name"
          keyword="method"
          value-of="function_declarator:declared_item:declared_name:name"
          />

        <point
          id="method_name_full"
          keyword="method"
          value-of="function_declarator:declared_item"
          />

        <point
          id="if_condition"
          keyword="if"
          value-of="expression"
          />

        <point
          id="for_expression"
          keyword="for"
          value-of="for_expression"
          />

        <point
          id="while_condition"
          keyword="while"
          value-of="expression"
          />

        <point
          id="do_while_condition"
          keyword="do_while"
          value-of="expression"
          />

        <point
          id="switch_expression"
          keyword="switch"
          value-of="expression"
          />

        <point
          id="case_label"
          keyword="case"
          value-of="label"
          />
    </points-of-interest>

    <pointcuts>
        <keyword
          name="imports"
          search-type="repeat declaration"
          sequential="false"
          >
            <templates>
                <template kind="replace">
                    <!--repeat declaration-->
                    <p name="all"/>
                </template>

                <template kind="match">
                    <!--repeat declaration-->
                </template>
            </templates>
            <pointcuts>
                <pointcut name="all">
                    <paste-algorithm>
                        <fragment-to-variable
                          name="Additions"
                          type="repeat declaration"
                          />
                        <insert-call
                          function="addToUsesUnique"
                          params="each Additions"
                          />
                    </paste-algorithm>
                </pointcut>
            </pointcuts>
        </keyword>

        <keyword
          name="class"
          search-type="class_specifier"
          filter-poi="class_name"
          sequential="false"
          >
            <templates>
                <template kind="replace">
                    <!--class_head--> '{
                        <p name="before_body"/>
                        <!--repeat member-->
                    '}
                </template>

                <template kind="match" auto-gen="grammar"/>
            </templates>
            <pointcuts>
                <pointcut name="before_body">
                    <paste-algorithm>
                        <insert-fragment
                          />
                    </paste-algorithm>
                </pointcut>
            </pointcuts>
        </keyword>

        <keyword
          name="method"
          search-type="function_definition"
          filter-poi="method_name_full"
          sequential="false"
          >
            <templates>
                <template kind="replace">
                    <!--opt decl_specifiers--> <!--function_declarator--> <!--opt ctor_initializer--> <!--opt exception_specification-->
                    '{
                        <p name="before_body"/>
                        <!--compound_statement-->
                        <p name="after_body"/>
                    '}
                </template>

                <template kind="match" auto-gen="grammar"/>
            </templates>
            <pointcuts>
                <pointcut name="before_body">
                    <paste-algorithm>
                        <deconstruct-variable
                          type="function_body"
                          variant="0"
                          />
                        <insert-fragment
                          />
                    </paste-algorithm>
                </pointcut>
                <pointcut name="after_body" clone="method::before_body"/>
            </pointcuts>
        </keyword>

        <!-- match-type already here in keyword when we described it in keyword-DAG -->
        <keyword
          name="if"
          search-type="unlabeled_statement"
          filter-poi="if_condition"
          >
            <templates>
                <template kind="replace">
                    '{
                        <p name="before"/>
                        'if '( <!--expression--> ') '{
                            <p name="before_body"/>
                            <!--statement-->
                            <p name="after_body"/>
                        '}
                        <!--opt else_statement-->
                        <p name="after"/>
                    '}
                </template>

                <template kind="match" auto-gen="grammar"/>
            </templates>
            <pointcuts>
                <pointcut name="before">
                    <paste-algorithm>
                        <insert-fragment
                          />
                    </paste-algorithm>
                </pointcut>

                <pointcut name="before_body"  clone="if::before"/>
                <pointcut name="after_body"   clone="if::before"/>
                <pointcut name="after"        clone="if::before"/>
            </pointcuts>
        </keyword>

        <keyword
          name="else"
          search-type="else_statement"
          sequential="false"
          >
            <templates>
                <!-- pointcut "after" already exists in "if" keyword -->
                <template kind="replace">
                    'else '{
                        <p name="before_body"/>
                        <!--statement-->
                        <p name="after_body"/>
                    '}
                </template>

                <template kind="match" auto-gen="grammar"/>
            </templates>
            <pointcuts>
                <pointcut name="before_body">
                    <paste-algorithm>
                        <insert-fragment
                          />
                    </paste-algorithm>
                </pointcut>
                <pointcut name="after_body" clone="else::before_body"/>
            </pointcuts>
        </keyword>

        <keyword
          name="for"
          search-type="unlabeled_statement"
          filter-poi="for_expression"
          >
            <templates>
                <template kind="replace">
                    '{
                        <p name="before"/>
                        'for '( <!--for_expression--> ') '{
                            <p name="before_body"/>
                            <!--statement-->
                            <p name="after_body"/>
                        '}
                        <p name="after"/>
                    '}
                </template>

                <template kind="match" auto-gen="grammar"/>
            </templates>
            <pointcuts>
                <pointcut name="before"       clone="if::before"/>
                <pointcut name="before_body"  clone="for::before"/>
                <pointcut name="after_body"   clone="for::before"/>
                <pointcut name="after"        clone="if::after"/>
            </pointcuts>
        </keyword>

        <keyword
          name="while"
          search-type="unlabeled_statement"
          filter-poi="while_condition"
          >
            <templates>
                <template kind="replace">
                    '{
                        <p name="before"/>
                        'while '( <!--expression--> ') '{
                            <p name="before_body"/>
                            <!--statement-->
                            <p name="after_body"/>
                        '}
                        <p name="after"/>
                    '}
                </template>

                <template kind="match" auto-gen="grammar"/>
            </templates>
            <pointcuts>
                <pointcut name="before"       clone="for::before"/>
                <pointcut name="before_body"  clone="for::before_body"/>
                <pointcut name="after_body"   clone="for::after_body"/>
                <pointcut name="after"        clone="for::after"/>
            </pointcuts>
        </keyword>

        <keyword
          name="do_while"
          search-type="unlabeled_statement"
          filter-poi="do_while_condition"
          >
            <templates>
                <template kind="replace">
                    '{
                        <p name="before"/>
                        'do '{
                            <p name="before_body"/>
                            <!--statement-->
                            <p name="after_body"/>
                        '} 'while '( <!--expression--> ');
                        <p name="after"/>
                    '}
                </template>

                <template kind="match" auto-gen="grammar"/>
            </templates>
            <pointcuts>
                <pointcut name="before"       clone="for::before"/>
                <pointcut name="before_body"  clone="for::before_body"/>
                <pointcut name="after_body"   clone="for::after_body"/>
                <pointcut name="after"        clone="for::after"/>
            </pointcuts>
        </keyword>

        <keyword
          name="switch"
          search-type="unlabeled_statement"
          filter-poi="switch_expression"
          >
            <templates>
                <template kind="replace">
                    '{
                        <p name="before"/>
                        'switch '( <!--expression--> ')
                            <!--statement-->
                        <p name="after"/>
                    '}
                </template>

                <template kind="match" auto-gen="grammar"/>
            </templates>
            <pointcuts>
                <pointcut name="before" clone="if::before"/>
                <pointcut name="after"  clone="if::after"/>
            </pointcuts>
        </keyword>

        <!--FIXME: wrong template-->
        <keyword
          name="case"
          search-type="statement"
          filter-poi="case_label"
          >
            <templates>
                <template kind="replace">
                    <!--repeat label--> '{
                        <p name="before_body"/>
                        <!--unlabeled_statement-->
                        <p name="after_body"/>
                    '}
                </template>

                <template kind="match" auto-gen="grammar"/>
            </templates>
            <pointcuts>
                <pointcut name="before_body"  clone="for::before_body"/>
                <pointcut name="after_body"   clone="for::after_body"/>
            </pointcuts>
        </keyword>
    </pointcuts>
</annotation>
