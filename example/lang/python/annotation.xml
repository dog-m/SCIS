<!-- default pipeline: txl "%SRC%" "%TRANSFORM%" -o "%DST%" %PARAMS% -->
<annotation
  pipeline='txl "%SRC%" "%ANNOTATON_DIR%/pyindent.txl" | txl stdin "%TRANSFORM%" -o "%DST%" %PARAMS%'
  >
    <grammar
      language="python"
      src="grammar.txl"
      >
        <keyword-DAG>
            <imports type="repeat statement_or_newline"/>
            <class type="classdef">
                <body type="statement_or_newline">
                    <method type="funcdef">
                        <if type="if_statement">
                            <elif type="elif_clause"/>
                            <else type="else_clause"/>
                        </if>
                        <for type="for_statement"/>
                        <while type="while_statement"/>
                        ...
                    </method>
                </body>
            </class>
        </keyword-DAG>
    </grammar>

    <lib>
      <function
          name="addToImportsIfNotExists"
          apply="call"
          params="Addition:statement_or_newline"
          >
            <source>
                replace [repeat statement_or_newline]
                  Imports [repeat statement_or_newline]

                deconstruct * Addition
                  Statement [simple_statement] _ [endofline]

                deconstruct not * [simple_statement] Imports
                  Statement
                construct Processed [repeat statement_or_newline]
                  Addition
                by
                  Processed [. Imports]
            </source>
        </function>
    </lib>

    <points-of-interest>
        <point
          id="class_name"
          keyword="class"
          value-of="classdef_head:id"
          />

        <point
          id="method_name"
          keyword="method"
          value-of="id"
          />

        <point
          id="if_condition"
          keyword="if"
          value-of="condition"
          />

        <point
          id="elif_condition"
          keyword="elif"
          value-of="condition"
          />

        <point
          id="for_expression"
          keyword="for"
          value-of="for_expression"
          />

        <point
          id="while_condition"
          keyword="while"
          value-of="condition"
          />
    </points-of-interest>

    <pointcuts>
        <keyword
          name="imports"
          search-type="repeat statement_or_newline"
          sequential="false"
          >
            <templates>
                <template kind="replace">
                    <!--repeat statement_or_newline-->
                    <p name="all"/>
                </template>

                <template kind="match">
                    <!--repeat statement_or_newline-->
                </template>
            </templates>
            <pointcuts>
                <pointcut name="all">
                    <paste-algorithm>
                        <create-variable
                          name="NewLine"
                          type="newline"
                          value="_"
                          />
                        <fragment-to-variable
                          name="Additions"
                          type="repeat statement_or_newline"
                          each-line-postfix="NewLine"
                          />
                        <insert-call
                          function="addToImportsIfNotExists"
                          params="each Additions"
                          />
                    </paste-algorithm>
                </pointcut>
            </pointcuts>
        </keyword>

        <keyword
          name="class"
          search-type="classdef"
          filter-poi="class_name"
          sequential="false"
          >
            <templates>
                <template kind="replace">
                    'class <!--opt id--> <!--opt classdef_checks--> ': 'INDENT <!--newline-->
                        <!--repeat statement_or_newline-->
                        <p name="after_body"/>
                    'DEDENT
                </template>

                <template kind="match">
                    'class <!--opt id--> <!--opt classdef_checks--> ': 'INDENT <!--newline-->
                        <!--repeat statement_or_newline-->
                    'DEDENT
                </template>
            </templates>
            <pointcuts>
                <pointcut name="all">
                    <paste-algorithm>
                        <create-variable
                          name="NewLine"
                          type="newline"
                          value="_"
                          />
                        <fragment-to-variable
                          name="Additions"
                          type="repeat statement_or_newline"
                          each-line-postfix="NewLine"
                          />
                        <insert-call
                          function="addToImportsIfNotExists"
                          params="each Additions"
                          />
                    </paste-algorithm>
                </pointcut>
            </pointcuts>
        </keyword>

        <keyword
          name="method"
          search-type="funcdef"
          >
            <!--Sources of [suite] block should be added manualy-->
            <templates>
                <template kind="replace">
                    'def <!--id--> <!--parameters--> ': 'INDENT <!--newline-->
                        <p name="before_body"/>
                        <!--repeat statement_or_newline-->
                        <p name="after_body"/>
                    'DEDENT
                </template>

                <template kind="match">
                    'def <!--id--> <!--parameters--> ': 'INDENT <!--newline-->
                        <!--repeat statement_or_newline-->
                    'DEDENT
                </template>
            </templates>
            <pointcuts>
                <pointcut name="before_body">
                    <paste-algorithm>
                        <insert-fragment
                          each-line-postfix="Newline"
                          />
                    </paste-algorithm>
                </pointcut>
                <pointcut name="after_body">
                    <paste-algorithm>
                        <fragment-to-variable
                          name="Additions"
                          type="repeat statement_or_newline"
                          each-line-postfix="Newline"
                          />
                        <insert-call
                          function="."
                          params="Additions"
                          />
                    </paste-algorithm>
                </pointcut>
            </pointcuts>
        </keyword>

        <!--"sequential=false" is default value. useful in cases where blocks are prohibited in the middle of other blocks-->
        <keyword
          name="if"
          search-type="repeat statement_or_newline"
          filter-poi="if_condition"
          sequential="true"
          >
            <templates>
                <template kind="replace">
                    <p name="before"/>
                    'if <!--condition--> ': 'INDENT <!--newline-->
                        <p name="before_body"/>
                        <!--repeat statement_or_newline-->
                        <p name="after_body"/>
                    'DEDENT
                    <!--repeat elif_clause-->
                    <!--opt else_clause-->
                    <p name="after"/>
                </template>

                <template kind="match">
                    'if <!--condition--> ': 'INDENT <!--newline-->
                        <!--repeat statement_or_newline-->
                    'DEDENT
                    <!--repeat elif_clause-->
                    <!--opt else_clause-->
                </template>
            </templates>
            <pointcuts>
                <pointcut name="before">
                    <paste-algorithm>
                        <insert-fragment
                          each-line-postfix="Newline"
                          />
                    </paste-algorithm>
                </pointcut>
                <pointcut name="before_body" clone="method::before_body"/>
                <pointcut name="after_body"  clone="method::after_body"/>
                <pointcut name="after"       clone="if::before"/>
            </pointcuts>
        </keyword>

        <keyword
          name="else"
          search-type="else_clause"
          sequential="false"
          >
            <templates>
                <template kind="replace">
                    'else ': 'INDENT <!--newline-->
                        <p name="before_body"/>
                        <!--repeat statement_or_newline-->
                        <p name="after_body"/>
                    'DEDENT
                </template>

                <template kind="match">
                    'else ': 'INDENT <!--newline-->
                        <!--repeat statement_or_newline-->
                    'DEDENT
                </template>
            </templates>
            <pointcuts>
                <pointcut name="before_body" clone="if::before_body"/>
                <pointcut name="after_body"  clone="if::after_body"/>
            </pointcuts>
        </keyword>

        <keyword
          name="for"
          search-type="repeat statement_or_newline"
          filter-poi="for_expression"
          sequential="true"
          >
            <templates>
                <template kind="replace">
                    <p name="before"/>
                    'for <!--for_expression--> ': 'INDENT <!--newline-->
                        <p name="before_body"/>
                        <!--repeat statement_or_newline-->
                        <p name="after_body"/>
                    'DEDENT
                    <!--opt else_clause-->
                    <p name="after"/>
                </template>

                <template kind="match">
                    'for <!--for_expression--> ': 'INDENT <!--newline-->
                        <!--repeat statement_or_newline-->
                    'DEDENT
                    <!--opt else_clause-->
                </template>
            </templates>
            <pointcuts>
                <pointcut name="before"      clone="if::before"/>
                <pointcut name="before_body" clone="if::before_body"/>
                <pointcut name="after_body"  clone="if::after_body"/>
                <pointcut name="after"       clone="if::after"/>
            </pointcuts>
        </keyword>

        <keyword
          name="while"
          search-type="repeat statement_or_newline"
          filter-poi="while_condition"
          sequential="true"
          >
            <templates>
                <template kind="replace">
                    <p name="before"/>
                    'while <!--condition--> ': 'INDENT <!--newline-->
                        <p name="before_body"/>
                        <!--repeat statement_or_newline-->
                        <p name="after_body"/>
                    'DEDENT
                    <!--opt else_clause-->
                    <p name="after"/>
                </template>

                <template kind="replace">
                    'while <!--condition--> ': 'INDENT <!--newline-->
                        <!--repeat statement_or_newline-->
                    'DEDENT
                    <!--opt else_clause-->
                </template>
            </templates>
            <pointcuts>
                <pointcut name="before"      clone="if::before"/>
                <pointcut name="before_body" clone="if::before_body"/>
                <pointcut name="after_body"  clone="if::after_body"/>
                <pointcut name="after"       clone="if::after"/>
            </pointcuts>
        </keyword>
    </pointcuts>
</annotation>
