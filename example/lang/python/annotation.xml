<!-- default pipeline: txl %SRC% %TRANSFORM% %PARAMS% -->
<annotation
  pipeline="txl %SRC% %WORKDIR%/lang/python/pyindent.txl | txl stdin %TRANSFORM% %PARAMS%"
  >
    <grammar
      language="python"
      src="lang/python/grammar.txl"
      base-executable-sequence-type="repeat statement_or_newline"
      >
        <keyword-DAG>
            <imports type="repeat statement_or_newline"/>
            <class type="classdef">
                <body type="statement_or_newline">
                    <method type="funcdef">
                        <if type="if_statement">
                            <elif type="elif_clause"/>
                            <else type="else_clause"/>
                        </if>
                        <for type="for_statement"/>
                        <while type="while_statement"/>
                        ...
                    </method>
                </body>
            </class>
        </keyword-DAG>
    </grammar>

    <lib/>

    <points-of-interest>
        <point
          id="class_name"
          keyword="class"
          value-of="classdef_head:opt id"
          />

        <point
          id="method_name"
          keyword="method"
          value-of="id"
          />
    </points-of-interest>

    <pointcuts>
        <keyword
          name="imports"
          sequential="false"
          >
            <replacement-patterns>
                <pattern search-type="repeat statement_or_newline">
                    <p name="all"/>
                    __NODE__
                </pattern>
            </replacement-patterns>
            <pointcuts>
                <pointcut name="all">
                    <fragment
                      type="???"
                      as="Additions"
                      />
                    <paste-algorithm>
                        <create-variable
                          name="NewLine"
                          type="newline"
                          value="_"
                          />
                        <insert-fragment
                          each-line-postfix="NewLine"
                          />
                    </paste-algorithm>
                </pointcut>
            </pointcuts>
        </keyword>

        <keyword
          name="method"
          sequential="false"
          >
            <!--Sources of [suite] block should be added manualy-->
            <replacement-patterns>
                <pattern search-type="funcdef">
                    'def <!--id--> <!--parameters--> ': 'INDENT <!--newline-->
                        <p name="before_body"/>
                        <!--repeat statement_or_newline-->
                        <p name="after_body"/>
                    'DEDENT
                </pattern>
            </replacement-patterns>
            <pointcuts>
                <pointcut name="before_body">
                    <fragment
                      type="???"
                      as="Additions"
                      />
                    <paste-algorithm>
                        <create-variable
                          type="newline"
                          value="_"
                          />
                        <deconstruct-variable
                          type="suite"
                          variant="0"
                          />
                        <deconstruct-variable
                          type="block"
                          variant="0"
                          />
                        <insert-fragment
                          each-line-postfix="Newline"
                          />
                    </paste-algorithm>
                </pointcut>
                <pointcut name="after_body">
                    <fragment
                      type="???"
                      as="Additions"
                      />
                    <paste-algorithm>
                        <create-variable
                          type="newline"
                          value="_"
                          />
                        <fragment-to-variable
                          name="Additions"
                          type="repeat import_declaration"
                          each-line-postfix="Newline"
                          />
                        <deconstruct-variable
                          type="suite"
                          variant="0"
                          />
                        <deconstruct-variable
                          type="block"
                          variant="0"
                          />
                        <insert-call
                          function="."
                          params="Additions"
                          />
                    </paste-algorithm>
                </pointcut>
            </pointcuts>
        </keyword>

        <keyword
          name="if"
          >
            <replacement-patterns>
                <pattern search-type="repeat statement_or_newline">
                    <p name="before"/>
                    'if <!--condition--> ': 'INDENT <!--newline-->
                        <p name="before_body"/>
                        <!--repeat statement_or_newline-->
                        <p name="after_body"/>
                    'DEDENT
                    <!--repeat elif_clause-->
                    <!--opt else_clause-->
                    <p name="after"/>
                </pattern>
            </replacement-patterns>
            <pointcuts>
                <pointcut name="before">
                    <fragment
                      type="???"
                      as="Additions"
                      />
                    <paste-algorithm>
                        <create-variable
                          type="newline"
                          value="_"
                          />
                        <insert-fragment
                          each-line-postfix="Newline"
                          />
                    </paste-algorithm>
                </pointcut>
                <pointcut name="before_body" clone="method::before_body"/>
                <pointcut name="after_body"  clone="method::after_body"/>
                <pointcut name="after"       clone="if::before"/>
            </pointcuts>
        </keyword>

        <keyword
          name="else"
          sequential="false"
          >
            <replacement-patterns>
                <pattern search-type="else_clause">
                    'else ': 'INDENT <!--newline-->
                        <p name="before_body"/>
                        <!--repeat statement_or_newline-->
                        <p name="after_body"/>
                    'DEDENT
                </pattern>
            </replacement-patterns>
            <pointcuts>
                <pointcut name="before_body" clone="if::before_body"/>
                <pointcut name="after_body"  clone="if::after_body"/>
            </pointcuts>
        </keyword>

        <keyword
          name="for"
          >
            <replacement-patterns>
                <pattern search-type="for_statement">
                    <p name="before"/>
                    'for <!--exprlist--> 'in <!--testlist--> ': 'INDENT <!--newline-->
                        <p name="before_body"/>
                        <!--repeat statement_or_newline-->
                        <p name="after_body"/>
                    'DEDENT
                    <!--opt else_clause-->
                    <p name="after"/>
                </pattern>
            </replacement-patterns>
            <pointcuts>
                <pointcut name="before"      clone="if::before"/>
                <pointcut name="before_body" clone="if::before_body"/>
                <pointcut name="after_body"  clone="if::after_body"/>
                <pointcut name="after"       clone="if::after"/>
            </pointcuts>
        </keyword>

        <keyword
          name="while"
          >
            <replacement-patterns>
                <pattern search-type="while_statement">
                    <p name="before"/>
                    'while <!--condition--> ': 'INDENT <!--newline-->
                        <p name="before_body"/>
                        <!--repeat statement_or_newline-->
                        <p name="after_body"/>
                    'DEDENT
                    <!--opt else_clause-->
                    <p name="after"/>
                </pattern>
            </replacement-patterns>
            <pointcuts>
                <pointcut name="before"      clone="if::before"/>
                <pointcut name="before_body" clone="if::before_body"/>
                <pointcut name="after_body"  clone="if::after_body"/>
                <pointcut name="after"       clone="if::after"/>
            </pointcuts>
        </keyword>
    </pointcuts>
</annotation>
